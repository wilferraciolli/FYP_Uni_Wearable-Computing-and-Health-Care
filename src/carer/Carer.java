/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package carer;

import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.showMessageDialog;

/**
 *
 * @author Wiliam
 */
public class Carer extends javax.swing.JFrame {
    
    String IP_ADDRESS = "192.168.0.8";
    //String IP_ADDRESS = "localhost";

    /**
     * Creates new form Carer
     */
    public Carer() {
        initComponents();
         //Set icon
         setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("heartImage.png")));
        
        //Populate the combo boxes
        List<String> conditionsOnDB = new ArrayList<String>();
        List<String> sensorsOnDB = new ArrayList<String>();
        List<String> carersOnDB = new ArrayList<String>();
        
        List<String> userNamessOnDB = new ArrayList<String>();
        List<String> conditionNamessOnDB = new ArrayList<String>();
      
        
        //populate condition IDs
        conditionsOnDB = getConditions();
        Iterator itrConditions = conditionsOnDB.iterator();        
        //loop as many values there are on hte List
        while(itrConditions.hasNext()){
            cBoxLinkedConditionID.addItem(itrConditions.next().toString());
        }
        
        //Populate Sensor IDs
        sensorsOnDB = getSensors();
        Iterator itrSensors = sensorsOnDB.iterator();        
        //loop as many values there are on hte List
        while(itrSensors.hasNext()){
            cBoxLinkedSensorID.addItem(itrSensors.next().toString());
        }        
        
         //Populate Sensor IDs
        carersOnDB = getCarer();
        Iterator itrCarers = carersOnDB.iterator();        
        //loop as many values there are on hte List
        while(itrCarers.hasNext()){
            cBoxCarerID.addItem(itrCarers.next().toString());
        }        
        
        //populate user names
        userNamessOnDB = getUserNames();
        Iterator itnUsers = userNamessOnDB.iterator();        
        //loop as many values there are on hte List
        while(itnUsers.hasNext()){
            cBoxUserNames.addItem(itnUsers.next().toString());
        }
        
        //populate condition names
        conditionNamessOnDB = getConditionNames();
        Iterator itrConditionNames = conditionNamessOnDB.iterator();        
        //loop as many values there are on hte List
        while(itrConditionNames.hasNext()){
            cBoxConditionNames.addItem(itrConditionNames.next().toString());
        }
        
     
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tPnlCarer = new javax.swing.JTabbedPane();
        pnlAddPatient = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        txtPatientName = new javax.swing.JTextField();
        txtPatientAddress = new javax.swing.JTextField();
        txtPatientPhone = new javax.swing.JTextField();
        txtPatientAge = new javax.swing.JTextField();
        txtPatientEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPatientNotes = new javax.swing.JTextArea();
        btnAddPatient = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtCheckPatientResults = new javax.swing.JTextArea();
        btnCheckPatient = new javax.swing.JButton();
        txtCarerNamePatient = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        cBoxCarerID = new javax.swing.JComboBox();
        pnlAddCarer = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        btnCreateCarer = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        txtCheckCarer = new javax.swing.JTextArea();
        btnCheckCarer = new javax.swing.JButton();
        pnlAddSensor = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSensorNotes = new javax.swing.JTextArea();
        txtSensorID = new javax.swing.JTextField();
        txtSensorName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        btnAddSensor = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        txtSensorReads = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtCheckSensorDisplayResults = new javax.swing.JTextArea();
        btnCheckSensorInDB = new javax.swing.JButton();
        pnlAddCondition = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtConditionID = new javax.swing.JTextField();
        txtConditionName = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtConditionNotes = new javax.swing.JTextArea();
        btnAddCondition = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtConditionDisplayResults = new javax.swing.JTextArea();
        btnCheckConditionInDB = new javax.swing.JButton();
        pnlLinkSensorCondition = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtLinkedSensorName = new javax.swing.JTextField();
        txtLinkedConditionThreshold = new javax.swing.JTextField();
        txtLinkedConditionMin = new javax.swing.JTextField();
        txtLinkedConditionMax = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtLinkedNotes = new javax.swing.JTextArea();
        btnLikCondition = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtDisplayResults = new javax.swing.JTextArea();
        btnCheckSensor = new javax.swing.JButton();
        btnCheckCondition = new javax.swing.JButton();
        btnCheckMedicalCondition = new javax.swing.JButton();
        cBoxLinkedConditionID = new javax.swing.JComboBox();
        jLabel37 = new javax.swing.JLabel();
        txtLinkedConditionName = new javax.swing.JTextField();
        cBoxLinkedSensorID = new javax.swing.JComboBox();
        pnlAddMedicalCondition = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        txtMCUserID = new javax.swing.JTextField();
        txtMCConditionID = new javax.swing.JTextField();
        txtMCCarerID = new javax.swing.JTextField();
        jScrollPane10 = new javax.swing.JScrollPane();
        txtMCNotes = new javax.swing.JTextArea();
        btnAddMedicalCondition = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtMCCarerName = new javax.swing.JTextField();
        jScrollPane11 = new javax.swing.JScrollPane();
        txtConditionSensorResults = new javax.swing.JTextArea();
        btnConditionSensor = new javax.swing.JButton();
        btnCheckMedicalConditionInDB = new javax.swing.JButton();
        cBoxUserNames = new javax.swing.JComboBox();
        cBoxConditionNames = new javax.swing.JComboBox();
        btnUserConditions = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 680));
        getContentPane().setLayout(null);

        jLabel8.setText("Patient ID");

        jLabel9.setText("Carer ID");

        jLabel10.setText("Name");

        jLabel11.setText("Address");

        jLabel12.setText("Age");

        jLabel13.setText("Phone");

        jLabel14.setText("eMail");

        jLabel15.setText("Notes");

        txtPatientName.setText("User 1");

        txtPatientAddress.setText("Address 1");

        txtPatientPhone.setText("07540595289");

        txtPatientAge.setText("30");

        txtPatientEmail.setText("wilferraciolli@hotmail.it");

        txtPatientNotes.setColumns(20);
        txtPatientNotes.setRows(5);
        txtPatientNotes.setText("User Comments here");
        jScrollPane1.setViewportView(txtPatientNotes);

        btnAddPatient.setText("Create Patient");
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });

        txtCheckPatientResults.setColumns(20);
        txtCheckPatientResults.setRows(5);
        jScrollPane6.setViewportView(txtCheckPatientResults);

        btnCheckPatient.setText("Check Patients");
        btnCheckPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckPatientActionPerformed(evt);
            }
        });

        txtCarerNamePatient.setEditable(false);
        txtCarerNamePatient.setText("no editable");
        txtCarerNamePatient.setEnabled(false);

        jLabel38.setText("Carer's Name");

        cBoxCarerID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxCarerIDItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlAddPatientLayout = new javax.swing.GroupLayout(pnlAddPatient);
        pnlAddPatient.setLayout(pnlAddPatientLayout);
        pnlAddPatientLayout.setHorizontalGroup(
            pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddPatientLayout.createSequentialGroup()
                .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAddPatientLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddPatient))
                    .addGroup(pnlAddPatientLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAddPatientLayout.createSequentialGroup()
                                .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10))
                                .addGap(16, 16, 16)
                                .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAddPatientLayout.createSequentialGroup()
                                        .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlAddPatientLayout.createSequentialGroup()
                                        .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cBoxCarerID, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel38)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCarerNamePatient))))
                            .addGroup(pnlAddPatientLayout.createSequentialGroup()
                                .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel15))
                                .addGap(18, 18, 18)
                                .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addGroup(pnlAddPatientLayout.createSequentialGroup()
                                        .addComponent(txtPatientPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                                        .addComponent(txtPatientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtPatientAddress))))))
                .addGap(54, 54, 54)
                .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckPatient))
                .addGap(109, 109, 109))
        );
        pnlAddPatientLayout.setVerticalGroup(
            pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddPatientLayout.createSequentialGroup()
                .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddPatientLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCheckPatient)
                            .addComponent(jLabel38)
                            .addComponent(txtCarerNamePatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxCarerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAddPatientLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(txtPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtPatientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtPatientPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(txtPatientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddPatient)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        tPnlCarer.addTab("Add Patient", pnlAddPatient);

        jLabel1.setText("ID");

        jLabel2.setText("Full Name");

        jLabel3.setText("Title");

        jLabel4.setText("Phone");

        jLabel5.setText("Prefered Contact");

        txtName.setText("Wiliam F");

        txtTitle.setText("Nurse");

        txtPhone.setText("07540595289");

        txtContact.setText("eMail");

        btnCreateCarer.setText("Create Carer");
        btnCreateCarer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCarerActionPerformed(evt);
            }
        });

        jLabel6.setText("eMail");

        txtEmail.setText("wiliam334@hotmail.com");

        txtCheckCarer.setColumns(20);
        txtCheckCarer.setRows(5);
        jScrollPane9.setViewportView(txtCheckCarer);

        btnCheckCarer.setText("Check Carers");
        btnCheckCarer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckCarerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAddCarerLayout = new javax.swing.GroupLayout(pnlAddCarer);
        pnlAddCarer.setLayout(pnlAddCarerLayout);
        pnlAddCarerLayout.setHorizontalGroup(
            pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddCarerLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddCarerLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(163, 163, 163)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAddCarerLayout.createSequentialGroup()
                        .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlAddCarerLayout.createSequentialGroup()
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCheckCarer))
                            .addGroup(pnlAddCarerLayout.createSequentialGroup()
                                .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnCreateCarer)
                                    .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtName)
                                        .addComponent(txtContact, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                        .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(76, 76, 76)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        pnlAddCarerLayout.setVerticalGroup(
            pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddCarerLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckCarer))
                .addGap(26, 26, 26)
                .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddCarerLayout.createSequentialGroup()
                        .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(pnlAddCarerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(btnCreateCarer))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        tPnlCarer.addTab("Add Carer", pnlAddCarer);

        jLabel16.setText("ID");

        jLabel17.setText("Name");

        txtSensorNotes.setColumns(20);
        txtSensorNotes.setRows(5);
        txtSensorNotes.setText("txtSensorNotes\n");
        jScrollPane2.setViewportView(txtSensorNotes);

        txtSensorID.setText("1");

        txtSensorName.setText("Temp 2211");

        jLabel18.setText("Notes");

        btnAddSensor.setText("Add Sensor");
        btnAddSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSensorActionPerformed(evt);
            }
        });

        jLabel19.setText("Reads");

        txtSensorReads.setText("Reads room temperature, himidty");

        txtCheckSensorDisplayResults.setColumns(20);
        txtCheckSensorDisplayResults.setRows(5);
        jScrollPane7.setViewportView(txtCheckSensorDisplayResults);

        btnCheckSensorInDB.setText("Check Sensors");
        btnCheckSensorInDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckSensorInDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAddSensorLayout = new javax.swing.GroupLayout(pnlAddSensor);
        pnlAddSensor.setLayout(pnlAddSensorLayout);
        pnlAddSensorLayout.setHorizontalGroup(
            pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddSensorLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddSensor)
                    .addGroup(pnlAddSensorLayout.createSequentialGroup()
                        .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel18)
                                .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel17)))
                            .addComponent(jLabel19))
                        .addGap(57, 57, 57)
                        .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSensorID, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSensorReads, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                            .addComponent(txtSensorName, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(55, 55, 55)
                .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckSensorInDB))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        pnlAddSensorLayout.setVerticalGroup(
            pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddSensorLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSensorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(btnCheckSensorInDB))
                .addGap(18, 18, 18)
                .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddSensorLayout.createSequentialGroup()
                        .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(txtSensorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(txtSensorReads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(pnlAddSensorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddSensor))
                    .addComponent(jScrollPane7))
                .addGap(78, 78, 78))
        );

        tPnlCarer.addTab("Add Sensor", pnlAddSensor);

        jLabel20.setText("ID");

        jLabel21.setText("Name");

        jLabel22.setText("Notes");

        txtConditionID.setText("1");

        txtConditionName.setText("Heart attack");

        txtConditionNotes.setColumns(20);
        txtConditionNotes.setRows(5);
        jScrollPane3.setViewportView(txtConditionNotes);

        btnAddCondition.setText("Add Condition");
        btnAddCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddConditionActionPerformed(evt);
            }
        });

        txtConditionDisplayResults.setColumns(20);
        txtConditionDisplayResults.setRows(5);
        jScrollPane8.setViewportView(txtConditionDisplayResults);

        btnCheckConditionInDB.setText("Check Conditions");
        btnCheckConditionInDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckConditionInDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAddConditionLayout = new javax.swing.GroupLayout(pnlAddCondition);
        pnlAddCondition.setLayout(pnlAddConditionLayout);
        pnlAddConditionLayout.setHorizontalGroup(
            pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddConditionLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddCondition)
                    .addGroup(pnlAddConditionLayout.createSequentialGroup()
                        .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel22)
                            .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel20)
                                .addComponent(jLabel21)))
                        .addGap(45, 45, 45)
                        .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConditionName, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConditionID, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(70, 70, 70)
                .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckConditionInDB))
                .addContainerGap(205, Short.MAX_VALUE))
        );
        pnlAddConditionLayout.setVerticalGroup(
            pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddConditionLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtConditionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckConditionInDB))
                .addGap(31, 31, 31)
                .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlAddConditionLayout.createSequentialGroup()
                        .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(txtConditionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(pnlAddConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddCondition))
                    .addComponent(jScrollPane8))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        tPnlCarer.addTab("Add Condition", pnlAddCondition);

        jLabel23.setText("Condition ID");

        jLabel24.setText("Sensor ID");

        jLabel25.setText("Name");

        jLabel26.setText("Threshold");

        jLabel27.setText("Min");

        jLabel28.setText("Max");

        jLabel29.setText("Notes");

        txtLinkedSensorName.setEditable(false);
        txtLinkedSensorName.setText("Body temperature");
        txtLinkedSensorName.setEnabled(false);

        txtLinkedConditionThreshold.setText("38");

        txtLinkedConditionMin.setText("15");

        txtLinkedConditionMax.setText("40");

        txtLinkedNotes.setColumns(20);
        txtLinkedNotes.setRows(5);
        txtLinkedNotes.setText("The threshold could be either to cold or too hot");
        jScrollPane4.setViewportView(txtLinkedNotes);

        btnLikCondition.setText("Link Condition");
        btnLikCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLikConditionActionPerformed(evt);
            }
        });

        txtDisplayResults.setColumns(20);
        txtDisplayResults.setRows(5);
        jScrollPane5.setViewportView(txtDisplayResults);

        btnCheckSensor.setText("Check Sensors");
        btnCheckSensor.setToolTipText("Display all sensors");
        btnCheckSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckSensorActionPerformed(evt);
            }
        });

        btnCheckCondition.setText("Check Conditions");
        btnCheckCondition.setToolTipText("Display all conditions");
        btnCheckCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckConditionActionPerformed(evt);
            }
        });

        btnCheckMedicalCondition.setText("Check Linked Condition");
        btnCheckMedicalCondition.setToolTipText("Display Sensor Linked to Condition ID");
        btnCheckMedicalCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckMedicalConditionActionPerformed(evt);
            }
        });

        cBoxLinkedConditionID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxLinkedConditionIDItemStateChanged(evt);
            }
        });

        jLabel37.setText("Name");

        txtLinkedConditionName.setEditable(false);
        txtLinkedConditionName.setText("Body temperature");
        txtLinkedConditionName.setEnabled(false);

        cBoxLinkedSensorID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxLinkedSensorIDItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlLinkSensorConditionLayout = new javax.swing.GroupLayout(pnlLinkSensorCondition);
        pnlLinkSensorCondition.setLayout(pnlLinkSensorConditionLayout);
        pnlLinkSensorConditionLayout.setHorizontalGroup(
            pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLinkSensorConditionLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel27)
                    .addComponent(jLabel29)
                    .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel24)
                        .addComponent(jLabel26)))
                .addGap(18, 18, 18)
                .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLinkSensorConditionLayout.createSequentialGroup()
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLinkedConditionMin, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(txtLinkedConditionThreshold))
                        .addGap(65, 65, 65)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtLinkedConditionMax))
                    .addComponent(btnLikCondition)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLinkSensorConditionLayout.createSequentialGroup()
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cBoxLinkedConditionID, 0, 44, Short.MAX_VALUE)
                            .addComponent(cBoxLinkedSensorID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLinkSensorConditionLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel25)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLinkSensorConditionLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel37)
                                .addGap(12, 12, 12)))
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLinkedSensorName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLinkedConditionName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32)
                .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlLinkSensorConditionLayout.createSequentialGroup()
                        .addComponent(btnCheckCondition)
                        .addGap(12, 12, 12)
                        .addComponent(btnCheckSensor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCheckMedicalCondition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane5))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        pnlLinkSensorConditionLayout.setVerticalGroup(
            pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLinkSensorConditionLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(btnCheckCondition)
                    .addComponent(btnCheckMedicalCondition)
                    .addComponent(cBoxLinkedConditionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckSensor)
                    .addComponent(jLabel37)
                    .addComponent(txtLinkedConditionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlLinkSensorConditionLayout.createSequentialGroup()
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25)
                            .addComponent(txtLinkedSensorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxLinkedSensorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(txtLinkedConditionThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(txtLinkedConditionMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28)
                            .addComponent(txtLinkedConditionMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlLinkSensorConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnLikCondition))
                    .addComponent(jScrollPane5))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        tPnlCarer.addTab("Link Condition to Sensors", pnlLinkSensorCondition);

        jLabel30.setText("User ID");

        jLabel31.setText("Condition ID");

        jLabel32.setText("Carer ID");

        jLabel33.setText("Notes");

        txtMCUserID.setEditable(false);
        txtMCUserID.setText("1");
        txtMCUserID.setEnabled(false);

        txtMCConditionID.setEditable(false);
        txtMCConditionID.setText("1");
        txtMCConditionID.setEnabled(false);

        txtMCCarerID.setEditable(false);
        txtMCCarerID.setText("1");
        txtMCCarerID.setEnabled(false);

        txtMCNotes.setColumns(20);
        txtMCNotes.setRows(5);
        jScrollPane10.setViewportView(txtMCNotes);

        btnAddMedicalCondition.setText("Add Medical Condition");
        btnAddMedicalCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMedicalConditionActionPerformed(evt);
            }
        });

        jLabel34.setText("User Name");

        jLabel35.setText("Condition Name");

        jLabel36.setText("Carer Name");

        txtMCCarerName.setEditable(false);
        txtMCCarerName.setText("no editable");
        txtMCCarerName.setEnabled(false);

        txtConditionSensorResults.setColumns(20);
        txtConditionSensorResults.setRows(5);
        jScrollPane11.setViewportView(txtConditionSensorResults);

        btnConditionSensor.setText("Check Condition's Sensors");
        btnConditionSensor.setToolTipText("Get the sensors used based on codition selected");
        btnConditionSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConditionSensorActionPerformed(evt);
            }
        });

        btnCheckMedicalConditionInDB.setText("Check Medical Conditions");
        btnCheckMedicalConditionInDB.setToolTipText("Get all the medical conditions on the database");
        btnCheckMedicalConditionInDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckMedicalConditionInDBActionPerformed(evt);
            }
        });

        cBoxUserNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxUserNamesItemStateChanged(evt);
            }
        });

        cBoxConditionNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxConditionNamesItemStateChanged(evt);
            }
        });

        btnUserConditions.setText("Get Conditions to user");
        btnUserConditions.setToolTipText("Get all conditions assigned to the user selected");
        btnUserConditions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserConditionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAddMedicalConditionLayout = new javax.swing.GroupLayout(pnlAddMedicalCondition);
        pnlAddMedicalCondition.setLayout(pnlAddMedicalConditionLayout);
        pnlAddMedicalConditionLayout.setHorizontalGroup(
            pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMCConditionID, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                            .addComponent(txtMCUserID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddMedicalConditionLayout.createSequentialGroup()
                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33))
                        .addGap(34, 34, 34)
                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAddMedicalCondition)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                                .addComponent(txtMCCarerID, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel36)
                                            .addComponent(jLabel34))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cBoxUserNames, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtMCCarerName, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                                        .addComponent(jLabel35)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cBoxConditionNames, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(34, 34, 34)))
                .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConditionSensor)
                    .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                            .addComponent(btnUserConditions)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCheckMedicalConditionInDB))
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(179, 179, 179))
        );
        pnlAddMedicalConditionLayout.setVerticalGroup(
            pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(txtMCUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(cBoxUserNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUserConditions)
                    .addComponent(btnCheckMedicalConditionInDB))
                .addGap(18, 18, 18)
                .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel31)
                        .addComponent(txtMCConditionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel35)
                        .addComponent(cBoxConditionNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnConditionSensor)))
                .addGap(18, 18, 18)
                .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(txtMCCarerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36)
                            .addComponent(txtMCCarerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAddMedicalConditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAddMedicalConditionLayout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addGap(95, 95, 95))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddMedicalConditionLayout.createSequentialGroup()
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(btnAddMedicalCondition))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        tPnlCarer.addTab("Link Patients to Conditions", pnlAddMedicalCondition);

        getContentPane().add(tPnlCarer);
        tPnlCarer.setBounds(20, 190, 981, 422);

        jLabel41.setFont(new java.awt.Font("Segoe UI Symbol", 1, 36)); // NOI18N
        jLabel41.setText("Wearable Devices & Health Care");
        jLabel41.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel41);
        jLabel41.setBounds(20, 130, 620, 48);

        jLabel42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carer/logo.png"))); // NOI18N
        getContentPane().add(jLabel42);
        jLabel42.setBounds(640, 10, 340, 180);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //********************* get all the User names in the DB *****************************************
    public List<String> getUserNames(){
        //create an array list rto hold all of the ID's
        List<String> conditionsToReturn = new ArrayList<String>(); 
           try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM patient";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
          
            //Iterate throught the returned values
            while (rs.next()) {
               String name = rs.getString("patientName");              
               conditionsToReturn.add(name);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
        
        return conditionsToReturn;
    }//ends string get User Names
    
    //********************* get all the conditionnames names in the DB *****************************************
    public List<String> getConditionNames(){
        //create an array list rto hold all of the ID's
        List<String> conditionsToReturn = new ArrayList<String>(); 
           try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM conditions";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
          
            //Iterate throught the returned values
            while (rs.next()) {
               
                String name = rs.getString("conditionName");              
               conditionsToReturn.add(name);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
        
        return conditionsToReturn;
    }//ends string get condition Names
    
     //********************* get all the Carer names in the DB *****************************************
    /*public List<String> getCarerNames(){
        //create an array list rto hold all of the ID's
        List<String> conditionsToReturn = new ArrayList<String>(); 
           try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM carer";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
          
            //Iterate throught the returned values
            while (rs.next()) {
                String name = rs.getString("carerName");              
               conditionsToReturn.add(name);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
        
        return conditionsToReturn;
    }//ends string get carer Names*/
    
     //********************* get all the Carer IDs in the DB *****************************************
    public List<String> getCarer(){
        //create an array list rto hold all of the ID's
        List<String> conditionsToReturn = new ArrayList<String>(); 
           try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM carer";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
          
            //Iterate throught the returned values
            while (rs.next()) {
               
                int carerID = rs.getInt("carerID");
                conditionsToReturn.add(String.valueOf(carerID));
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
        
        return conditionsToReturn;
    }//ends string get carer ID's
    
    //********************* get all the condition IDs in the DB *****************************************
    public List<String> getConditions(){
        //create an array list rto hold all of the ID's
        List<String> conditionsToReturn = new ArrayList<String>(); 
           try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM conditions";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
          
            //Iterate throught the returned values
            while (rs.next()) {
               
                int id = rs.getInt("conditionID");
                conditionsToReturn.add(String.valueOf(id));
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
        
        return conditionsToReturn;
    }//ends string get conditions
    
    
       //********************* get all the sensor IDs in the DB *****************************************
    public List<String> getSensors(){
        //create an array list rto hold all of the ID's
        List<String> conditionsToReturn = new ArrayList<String>(); 
           try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM sensor";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
          
            //Iterate throught the returned values
            while (rs.next()) {
               
                int id = rs.getInt("sensorID");
                conditionsToReturn.add(String.valueOf(id));
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
        
        return conditionsToReturn;
    }//ends string get sensor ID's
    
    //*********************** method to check which sensors are linked to which condition **************** 
    private void btnCheckMedicalConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckMedicalConditionActionPerformed

         try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT sensorID, conditionSensor "
                    + "FROM conditionsensor WHERE conditionID= '"+cBoxLinkedConditionID.getSelectedItem().toString()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

             txtDisplayResults.setText("Showing sensors to condition " + txtLinkedConditionName.getText() + "\n");
            txtDisplayResults.append("\nSensor ID    Sensor Name\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("sensorID");
                String sensorName = rs.getString("conditionSensor");
                txtDisplayResults.append("\n           " + id + "               " + sensorName );
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
       
    }//GEN-LAST:event_btnCheckMedicalConditionActionPerformed

    //*********************** method to query all of the conditipns on the db ************************
    private void btnCheckConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckConditionActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM conditions";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtDisplayResults.setText("ID      Condition Name\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("conditionID");
                String conditionName = rs.getString("conditionName");
                txtDisplayResults.append("\n" + id + "        " + conditionName);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCheckConditionActionPerformed

    //*************************** method to check the sensors already set up ***********
    private void btnCheckSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckSensorActionPerformed

        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM sensor";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtDisplayResults.setText("ID      Sensor Name                   Sensor Reads\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("sensorID");
                String sensorName = rs.getString("sensorName");
                String sensorReads = rs.getString("sensorReads");
                txtDisplayResults.append("\n" + id + "        " + sensorName + "                 " + sensorReads);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCheckSensorActionPerformed

    //******************************* method to link sensor with condition ***********************
    private void btnLikConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLikConditionActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

           // String sensorID = txtLinkedSensorID.getText();
            String sensorID = cBoxLinkedSensorID.getSelectedItem().toString();
            //String conditionID = txtLinkedConditionID.getText();
            String conditionID = cBoxLinkedConditionID.getSelectedItem().toString();
            
            String sensorName = txtLinkedSensorName.getText();
            String threshold = txtLinkedConditionThreshold.getText();
            String Min = txtLinkedConditionMin.getText();
            String Max = txtLinkedConditionMax.getText();
            String linkedNotes = txtLinkedNotes.getText();

            //build the query and run it
            String insert = "INSERT INTO conditionsensor(sensorID, conditionID, conditionSensor, conditionSensorThreshold, conditionSensorMin, conditionsensorMax, conditionsensorComments)"
            + "VALUES(?,?,?,?,?,?,?)";

            //build the statement
            PreparedStatement preparedStm = con.prepareStatement(insert);
            preparedStm.setString(1, sensorID);
            preparedStm.setString(2, conditionID);
            preparedStm.setString(3, sensorName);
            preparedStm.setString(4, threshold);
            preparedStm.setString(5, Min);
            preparedStm.setString(6, Max);
            preparedStm.setString(7, linkedNotes);

            //execute the query
            preparedStm.execute();

            // stmt.executeUpdate(insert);
            System.out.println(insert);
            //            PrintWriter myFile = new PrintWriter("test.txt");
            //            myFile.write(insert);
            //            myFile.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnLikConditionActionPerformed

    private void btnCheckConditionInDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckConditionInDBActionPerformed

        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM conditions";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtConditionDisplayResults.setText("ID      Codition Name\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("conditionID");
                String conditionName = rs.getString("conditionName");
                txtConditionDisplayResults.append("\n" + id + "        " + conditionName);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCheckConditionInDBActionPerformed

    //************************* add condition ************************************
    private void btnAddConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddConditionActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            String conditionID = txtConditionID.getText();
            String conditionName = txtConditionName.getText();
            String conditionNotes = txtConditionNotes.getText();

            //build the query and run it
            String insert = "INSERT INTO conditions(conditionID, conditionName, conditionComments)"
            + "VALUES(?,?,?)";

            //build the statement
            PreparedStatement preparedStm = con.prepareStatement(insert);
            preparedStm.setString(1, conditionID);
            preparedStm.setString(2, conditionName);
            preparedStm.setString(3, conditionNotes);

            //execute the query
            preparedStm.execute();

            // stmt.executeUpdate(insert);
            System.out.println(insert);
            //            PrintWriter myFile = new PrintWriter("test.txt");
            //            myFile.write(insert);
            //            myFile.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAddConditionActionPerformed

    private void btnCheckSensorInDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckSensorInDBActionPerformed

        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM sensor";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtCheckSensorDisplayResults.setText("ID      Sensor Name                     Sensor Reads\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("sensorID");
                String sensorName = rs.getString("sensorName");
                String sensorReads = rs.getString("sensorReads");
                txtCheckSensorDisplayResults.append("\n" + id + "        " + sensorName + "             " + sensorReads);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCheckSensorInDBActionPerformed

    //*********************** add sensor to database ***********************
    private void btnAddSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSensorActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            String sensorID = txtSensorID.getText();
            String sensorName = txtSensorName.getText();
            String sensorReads = txtSensorReads.getText();
            String sensorNotes = txtSensorNotes.getText();

            //build the query and run it
            String insert = "INSERT INTO sensor(sensorID, sensorName, sensorReads, sensorComments)"
            + "VALUES(?,?,?,?)";

            //build the statement
            PreparedStatement preparedStm = con.prepareStatement(insert);
            preparedStm.setString(1, sensorID);
            preparedStm.setString(2, sensorName);
            preparedStm.setString(3, sensorReads);
            preparedStm.setString(4, sensorNotes);

            //execute the query
            preparedStm.execute();

            // stmt.executeUpdate(insert);
            System.out.println(insert);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_btnAddSensorActionPerformed

    private void btnCheckCarerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckCarerActionPerformed

        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM carer";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtCheckCarer.setText("ID      Carer Name\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("carerID");
                String carerName = rs.getString("carerName");
                txtCheckCarer.append("\n" + id + "        " + carerName);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCheckCarerActionPerformed

    //************************** Adds a new carer ****************************************
    private void btnCreateCarerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCarerActionPerformed

        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the statement
            Statement stmt = (Statement) con.createStatement();

            String ID = txtID.getText();
            String name = txtName.getText();
            String position = txtTitle.getText();
            String phone = txtPhone.getText();
            String eMail = txtEmail.getText();
            String preferedcontactmethod = txtContact.getText();

            //build the query and run it
            String insert = "INSERT INTO carer(carerID, carerName, carerTitle, carerPhone, carerEmail, carerPreferedContact)"
            + "VALUES(?,?,?,?,?,?)";

            //build the statement
            PreparedStatement preparedStm = con.prepareStatement(insert);
            preparedStm.setString(1, ID);
            preparedStm.setString(2, name);
            preparedStm.setString(3, position);
            preparedStm.setString(4, phone);
            preparedStm.setString(5, eMail);
            preparedStm.setString(6, preferedcontactmethod);

            //execute the query
            preparedStm.execute();

            // stmt.executeUpdate(insert);
            System.out.println(insert);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_btnCreateCarerActionPerformed

    //**************** method to select patients from db **************************
    private void btnCheckPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckPatientActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM patient";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtCheckPatientResults.setText("ID      Patient Name\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("patientID");
                String patientName = rs.getString("patientName");
                txtCheckPatientResults.append("\n" + id + "        " + patientName);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_btnCheckPatientActionPerformed

    //*************************** Adds a new patient **********************************
    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            String patientID = txtPatientID.getText();
            //String carerID = txtCarerID.getText();
            String carerID = cBoxCarerID.getSelectedItem().toString();
            String name = txtPatientName.getText();
            String Address = txtPatientAddress.getText();
            String age = txtPatientAge.getText();
            String phone = txtPatientPhone.getText();
            String eMail = txtPatientEmail.getText();
            String patientNotes = txtPatientNotes.getText();

            //build the query and run it
            String insert = "INSERT INTO patient(patientID, carerID, patientName, patientAddress, patientAge, patientPhone, patientEmail, patientComments)"
            + "VALUES(?,?,?,?,?,?,?,?)";

            //build the statement
            PreparedStatement preparedStm = con.prepareStatement(insert);
            preparedStm.setString(1, patientID);
            preparedStm.setString(2, carerID);
            preparedStm.setString(3, name);
            preparedStm.setString(4, Address);
            preparedStm.setString(5, age);
            preparedStm.setString(6, phone);
            preparedStm.setString(7, eMail);
            preparedStm.setString(8, patientNotes);

            //execute the query
            preparedStm.execute();

            // stmt.executeUpdate(insert);
            System.out.println(insert);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAddPatientActionPerformed

    //*************************** display condition name  as user change condition ID *********************
    private void cBoxLinkedConditionIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxLinkedConditionIDItemStateChanged
             
         try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT conditionName "
                    + "FROM conditions WHERE conditionID= '"+cBoxLinkedConditionID.getSelectedItem().toString()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            //Iterate throught the returned values
            while (rs.next()) {               
                String conditionName = rs.getString("conditionName");
                txtLinkedConditionName.setText(conditionName);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
                
    }//GEN-LAST:event_cBoxLinkedConditionIDItemStateChanged

    //*************************** display sensor name  as user change sensoor ID *********************
    private void cBoxLinkedSensorIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxLinkedSensorIDItemStateChanged
       
         try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT sensorName "
                    + "FROM sensor WHERE sensorID= '"+cBoxLinkedSensorID.getSelectedItem().toString()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            
            //Iterate throught the returned values
            while (rs.next()) {               
                String sensorName = rs.getString("sensorName");
                txtLinkedSensorName.setText(sensorName);                
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
        
    }//GEN-LAST:event_cBoxLinkedSensorIDItemStateChanged

     //*************************** display sensor name  as user change carer ID *********************
    private void cBoxCarerIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxCarerIDItemStateChanged
         try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT carerName "
                    + "FROM carer WHERE carerID= '"+cBoxCarerID.getSelectedItem().toString()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            
            //Iterate throught the returned values
            while (rs.next()) {               
                String carerName = rs.getString("carerName");
                txtCarerNamePatient.setText(carerName);                
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_cBoxCarerIDItemStateChanged

    //******************** method to update the carer name for user Medical condition ****************
    private void cBoxUserNamesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxUserNamesItemStateChanged
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT patientID, carerID "
            + "FROM patient WHERE patientName= '"+cBoxUserNames.getSelectedItem().toString()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            int carerID = 1;
            int patientID = 1;

            //Iterate throught the returned the carer ID
            while (rs.next()) {
                carerID = rs.getInt("carerID");
                patientID = rs.getInt("patientID");
                txtMCCarerID.setText(String.valueOf(carerID));
                txtMCUserID.setText(String.valueOf(patientID));
            }//ends iterator
            st.close();

            //From the carer Id get the Carer Name
            //create the Query
            query = "SELECT carerName "
            + "FROM carer WHERE carerID= '"+carerID+"' ";

            //declare the statement and execute query
            Statement st1 = con.createStatement();
            ResultSet rs1 = st1.executeQuery(query);

            //Iterate throught the returned values
            while (rs1.next()) {
                String carerName = rs1.getString("carerName");
                txtMCCarerName.setText(carerName);
            }//ends iterator
            st1.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_cBoxUserNamesItemStateChanged

    //******************* method to cj=heck all th emedical conditions on the database **************
    private void btnCheckMedicalConditionInDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckMedicalConditionInDBActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * FROM medicalcondition";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtConditionSensorResults.setText("User ID      Condition ID     Carer ID\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int userID = rs.getInt("userID");
                int conditionID = rs.getInt("conditionID");
                int carerID = rs.getInt("carerID");

                txtConditionSensorResults.append("\n" + userID + "        " + conditionID + "       " + carerID);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCheckMedicalConditionInDBActionPerformed

    //************************ method o get how many sensors each condition needs ********************
    private void btnConditionSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConditionSensorActionPerformed
        // Add how many sensors each condition needs and their thresholds
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT sensorID, conditionSensor, conditionSensorThreshold, conditionSensorMin, conditionSensorMax "
            + "FROM conditionsensor WHERE conditionID= '"+txtMCConditionID.getText()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtConditionSensorResults.setText("Showing sensors linked to condition " + cBoxConditionNames.getSelectedItem().toString() + "\n");
            txtConditionSensorResults.append("\nSensor ID      Sensor Name            Thold    min     max\n");
            //Iterate throught the returned values
            while (rs.next()) {
                int id = rs.getInt("sensorID");
                String sensorName = rs.getString("conditionSensor");
                String threshold = rs.getString("conditionSensorThreshold");
                String min = rs.getString("conditionSensorMin");
                String max = rs.getString("conditionSensorMax");

                txtConditionSensorResults.append("\n         " + id + "                    " + sensorName + "              " + threshold + "          " + min +"    " + max);
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnConditionSensorActionPerformed

    //************* method to add medical condition *************************
    private void btnAddMedicalConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMedicalConditionActionPerformed
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            String userId = txtMCUserID.getText();
            String conditionID = txtMCConditionID.getText();
            String carerID = txtMCCarerID.getText();
            String medicalConditionNotes = txtMCNotes.getText();

            //build the query and run it
            String insert = "INSERT INTO medicalcondition(userID, conditionID, carerID, medicalConditionComments)"
            + "VALUES(?,?,?,?)";

            //build the statement
            PreparedStatement preparedStm = con.prepareStatement(insert);
            preparedStm.setString(1, userId);
            preparedStm.setString(2, conditionID);
            preparedStm.setString(3, carerID);
            preparedStm.setString(4, medicalConditionNotes);

            //execute the query
            preparedStm.execute();

            // stmt.executeUpdate(insert);
            System.out.println(insert);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAddMedicalConditionActionPerformed

    //*************************** get the Id of the condition *********************
    private void cBoxConditionNamesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxConditionNamesItemStateChanged
        try {
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT conditionID "
                    + " FROM conditions WHERE conditionName= '"+cBoxConditionNames.getSelectedItem().toString()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            
            //Iterate throught the returned values
            while (rs.next()) {               
                int conditionID = rs.getInt("conditionID");
                txtMCConditionID.setText(String.valueOf(conditionID));                
            }//ends iterator
            st.close();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_cBoxConditionNamesItemStateChanged

    //******************* get all conditions assigned to a user ********************
    private void btnUserConditionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserConditionsActionPerformed

          try {
              //create the variables to hold the ids and get their names
              int conditionID = 1;
              String conditionName = "";
                         
            //create the connection to MySQL server
            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP_ADDRESS + ":3306/wiltech", "wilferraciolli", "160916");

            //create the Query
            String query = "SELECT * "
                    +" FROM medicalcondition WHERE userID= '"+txtMCUserID.getText().toString()+"' ";

            //declare the statement and execute query
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            txtConditionSensorResults.setText("Showing conditions assigned to " + cBoxUserNames.getSelectedItem().toString() + "\n");
            txtConditionSensorResults.append("\nCondition ID     Condition Name\n");
            //Iterate throught the returned values
            while (rs.next()) {                
                conditionID = rs.getInt("conditionID");
                
                //From the Condition Id get the condition Name
                //create the Query
                query = "SELECT conditionName "
                + "FROM conditions WHERE conditionID= '"+conditionID+"' ";
                //declare the statement and execute query
                Statement st1 = con.createStatement();
                ResultSet rs1 = st1.executeQuery(query);
                //Iterate throught the returned values
                while (rs1.next()) {
                    conditionName = rs1.getString("conditionName");                
                }//ends iterator
                st1.close();
               
                //Set the condition ID and Name to the textView Display
                txtConditionSensorResults.append("\n             " + conditionID + "                  " + conditionName);
            }//ends iterator
            st.close();
            
             

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnUserConditionsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Carer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Carer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Carer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Carer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Carer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCondition;
    private javax.swing.JButton btnAddMedicalCondition;
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JButton btnAddSensor;
    private javax.swing.JButton btnCheckCarer;
    private javax.swing.JButton btnCheckCondition;
    private javax.swing.JButton btnCheckConditionInDB;
    private javax.swing.JButton btnCheckMedicalCondition;
    private javax.swing.JButton btnCheckMedicalConditionInDB;
    private javax.swing.JButton btnCheckPatient;
    private javax.swing.JButton btnCheckSensor;
    private javax.swing.JButton btnCheckSensorInDB;
    private javax.swing.JButton btnConditionSensor;
    private javax.swing.JButton btnCreateCarer;
    private javax.swing.JButton btnLikCondition;
    private javax.swing.JButton btnUserConditions;
    private javax.swing.JComboBox cBoxCarerID;
    private javax.swing.JComboBox cBoxConditionNames;
    private javax.swing.JComboBox cBoxLinkedConditionID;
    private javax.swing.JComboBox cBoxLinkedSensorID;
    private javax.swing.JComboBox cBoxUserNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel pnlAddCarer;
    private javax.swing.JPanel pnlAddCondition;
    private javax.swing.JPanel pnlAddMedicalCondition;
    private javax.swing.JPanel pnlAddPatient;
    private javax.swing.JPanel pnlAddSensor;
    private javax.swing.JPanel pnlLinkSensorCondition;
    private javax.swing.JTabbedPane tPnlCarer;
    private javax.swing.JTextField txtCarerNamePatient;
    private javax.swing.JTextArea txtCheckCarer;
    private javax.swing.JTextArea txtCheckPatientResults;
    private javax.swing.JTextArea txtCheckSensorDisplayResults;
    private javax.swing.JTextArea txtConditionDisplayResults;
    private javax.swing.JTextField txtConditionID;
    private javax.swing.JTextField txtConditionName;
    private javax.swing.JTextArea txtConditionNotes;
    private javax.swing.JTextArea txtConditionSensorResults;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextArea txtDisplayResults;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLinkedConditionMax;
    private javax.swing.JTextField txtLinkedConditionMin;
    private javax.swing.JTextField txtLinkedConditionName;
    private javax.swing.JTextField txtLinkedConditionThreshold;
    private javax.swing.JTextArea txtLinkedNotes;
    private javax.swing.JTextField txtLinkedSensorName;
    private javax.swing.JTextField txtMCCarerID;
    private javax.swing.JTextField txtMCCarerName;
    private javax.swing.JTextField txtMCConditionID;
    private javax.swing.JTextArea txtMCNotes;
    private javax.swing.JTextField txtMCUserID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPatientAddress;
    private javax.swing.JTextField txtPatientAge;
    private javax.swing.JTextField txtPatientEmail;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextArea txtPatientNotes;
    private javax.swing.JTextField txtPatientPhone;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSensorID;
    private javax.swing.JTextField txtSensorName;
    private javax.swing.JTextArea txtSensorNotes;
    private javax.swing.JTextField txtSensorReads;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
